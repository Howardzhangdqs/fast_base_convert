{"version":3,"file":"index-CNblCi_x.js","sources":["../../pkg/fast_base_convert.js","../../src/main.ts"],"sourcesContent":["let wasm;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nconst MAX_SAFARI_DECODE_BYTES = 2146435072;\nlet numBytesDecoded = 0;\nfunction decodeText(ptr, len) {\n    numBytesDecoded += len;\n    if (numBytesDecoded >= MAX_SAFARI_DECODE_BYTES) {\n        cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n        cachedTextDecoder.decode();\n        numBytesDecoded = len;\n    }\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return decodeText(ptr, len);\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder();\n\nif (!('encodeInto' in cachedTextEncoder)) {\n    cachedTextEncoder.encodeInto = function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length\n        };\n    }\n}\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = cachedTextEncoder.encodeInto(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nexport function greet() {\n    wasm.greet();\n}\n\nlet cachedUint32ArrayMemory0 = null;\n\nfunction getUint32ArrayMemory0() {\n    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {\n        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachedUint32ArrayMemory0;\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4, 4) >>> 0;\n    getUint32ArrayMemory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n * @param {string} test_type\n * @param {number} iterations\n * @param {Uint32Array} input_digits\n * @param {number} from_base\n * @param {number} to_base\n * @returns {any}\n */\nexport function run_quick_benchmark(test_type, iterations, input_digits, from_base, to_base) {\n    const ptr0 = passStringToWasm0(test_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray32ToWasm0(input_digits, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.run_quick_benchmark(ptr0, len0, iterations, ptr1, len1, from_base, to_base);\n    return ret;\n}\n\nexport function main() {\n    wasm.main();\n}\n\nconst BenchmarkRunnerFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_benchmarkrunner_free(ptr >>> 0, 1));\n\nexport class BenchmarkRunner {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BenchmarkRunnerFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_benchmarkrunner_free(ptr, 0);\n    }\n    /**\n     * @param {string} test_type\n     * @param {number} iterations\n     * @param {Uint32Array} input_digits\n     * @param {number} from_base\n     * @param {number} to_base\n     */\n    constructor(test_type, iterations, input_digits, from_base, to_base) {\n        const ptr0 = passStringToWasm0(test_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray32ToWasm0(input_digits, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.benchmarkrunner_new(ptr0, len0, iterations, ptr1, len1, from_base, to_base);\n        this.__wbg_ptr = ret >>> 0;\n        BenchmarkRunnerFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * @returns {any}\n     */\n    run_benchmark() {\n        const ret = wasm.benchmarkrunner_run_benchmark(this.__wbg_ptr);\n        return ret;\n    }\n}\nif (Symbol.dispose) BenchmarkRunner.prototype[Symbol.dispose] = BenchmarkRunner.prototype.free;\n\nconst EXPECTED_RESPONSE_TYPES = new Set(['basic', 'cors', 'default']);\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                const validResponse = module.ok && EXPECTED_RESPONSE_TYPES.has(module.type);\n\n                if (validResponse && module.headers.get('Content-Type') !== 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_Error_e17e777aac105295 = function(arg0, arg1) {\n        const ret = Error(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_alert_9d8f96a579801060 = function(arg0, arg1) {\n        alert(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_call_13410aac570ffff7 = function() { return handleError(function (arg0, arg1) {\n        const ret = arg0.call(arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_instanceof_Window_12d20d558ef92592 = function(arg0) {\n        let result;\n        try {\n            result = arg0 instanceof Window;\n        } catch (_) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_new_19c25a3f2fa63a02 = function() {\n        const ret = new Object();\n        return ret;\n    };\n    imports.wbg.__wbg_new_1f3a344cf3123716 = function() {\n        const ret = new Array();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_254190557c45b4ec = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_now_886b39d7ec380719 = function(arg0) {\n        const ret = arg0.now();\n        return ret;\n    };\n    imports.wbg.__wbg_performance_a221af8decc752fb = function(arg0) {\n        const ret = arg0.performance;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_set_3f1d0b984ed272ed = function(arg0, arg1, arg2) {\n        arg0[arg1] = arg2;\n    };\n    imports.wbg.__wbg_set_90f6c0f7bd8c0415 = function(arg0, arg1, arg2) {\n        arg0[arg1 >>> 0] = arg2;\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_8921f820c2ce3f12 = function() {\n        const ret = typeof global === 'undefined' ? null : global;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_f0a4409105898184 = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_995b214ae681ff99 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_cde3890479c675ea = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_wbindgendebugstring_99ef257a3ddda34d = function(arg0, arg1) {\n        const ret = debugString(arg1);\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_wbindgenisundefined_c4b71d073b92f3c5 = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_wbindgenthrow_451ec1a8469d7eb6 = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_cast_2241b6af4c4b2941 = function(arg0, arg1) {\n        // Cast intrinsic for `Ref(String) -> Externref`.\n        const ret = getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_cast_4625c577ab2ec9ee = function(arg0) {\n        // Cast intrinsic for `U64 -> Externref`.\n        const ret = BigInt.asUintN(64, arg0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_cast_d6cd19b81560fd6e = function(arg0) {\n        // Cast intrinsic for `F64 -> Externref`.\n        const ret = arg0;\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_2;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint32ArrayMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('fast_base_convert_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n","import init, { run_quick_benchmark } from '../pkg/fast_base_convert.js';\n\ninterface BenchmarkResult {\n  baseline_time: number;\n  optimized_time: number;\n  speedup: number;\n  baseline_result: number[];\n  optimized_result: number[];\n  is_correct: boolean;\n}\n\ninterface TestCase {\n  name: string;\n  type: string;\n  description: string;\n  iterations: number;\n  inputDigits: number[];\n  fromBase: number;\n  toBase: number;\n}\n\nclass BenchmarkApp {\n  private wasmInitialized: boolean = false;\n\n  private benchmarkTests: TestCase[] = [\n    {\n      name: \"Small Number\",\n      type: \"small-number\",\n      description: \"12345 (10→16)\",\n      iterations: 100000,\n      inputDigits: [5, 4, 3, 2, 1],\n      fromBase: 10,\n      toBase: 16\n    },\n    {\n      name: \"Power of Two\",\n      type: \"power-of-two\",\n      description: \"65535 (16→8)\",\n      iterations: 1000000,\n      inputDigits: [15, 15, 15, 15],\n      fromBase: 16,\n      toBase: 8\n    },\n    {\n      name: \"Aligned Bases\",\n      type: \"aligned-bases\",\n      description: \"123 (4→16)\",\n      iterations: 200000,\n      inputDigits: [3, 2, 1, 0],\n      fromBase: 4,\n      toBase: 16\n    },\n    {\n      name: \"Large Number\",\n      type: \"large-number\",\n      description: \"10^100 (10→16)\",\n      iterations: 10000,\n      inputDigits: Array(101).fill(0).map((_, i) => i === 0 ? 1 : 0),\n      fromBase: 10,\n      toBase: 16\n    },\n    {\n      name: \"Binary to Hex\",\n      type: \"power-of-two\",\n      description: \"10101010 (2→16)\",\n      iterations: 500000,\n      inputDigits: [0, 1, 0, 1, 0, 1, 0, 1],\n      fromBase: 2,\n      toBase: 16\n    },\n    {\n      name: \"Hex to Decimal\",\n      type: \"general\",\n      description: \"FF2541 (16→10)\",\n      iterations: 80000,\n      inputDigits: [1, 4, 5, 2, 5, 2, 15, 15],\n      fromBase: 16,\n      toBase: 10\n    },\n    {\n      name: \"Base 32 to 64\",\n      type: \"power-of-two\",\n      description: \"AZBYCX (32→64)\",\n      iterations: 300000,\n      inputDigits: [24, 2, 27, 1, 24, 2],\n      fromBase: 32,\n      toBase: 64\n    },\n    {\n      name: \"Octal to Binary\",\n      type: \"power-of-two\",\n      description: \"755 (8→2)\",\n      iterations: 400000,\n      inputDigits: [5, 5, 7],\n      fromBase: 8,\n      toBase: 2\n    }\n  ];\n\n  constructor() {\n    this.initializeEventListeners();\n    // Initialize base hints\n    setTimeout(() => {\n      this.updateBaseHint('fromBase');\n      this.updateBaseHint('toBase');\n    }, 100);\n  }\n\n  private initializeEventListeners() {\n    // Tab navigation\n    const tabButtons = document.querySelectorAll('.tab-btn');\n    tabButtons.forEach(button => {\n      button.addEventListener('click', (e) => {\n        const targetTab = (e.target as HTMLElement).getAttribute('data-tab') || 'benchmarks';\n        this.switchTab(targetTab);\n      });\n    });\n\n    // Benchmark tab\n    const runAllButton = document.getElementById('runAllBenchmarks') as HTMLButtonElement;\n    if (runAllButton) {\n      runAllButton.addEventListener('click', () => this.runAllBenchmarks());\n    }\n\n    // Converter tab\n    const convertBtn = document.getElementById('convertBtn') as HTMLButtonElement;\n    const clearBtn = document.getElementById('clearBtn') as HTMLButtonElement;\n    const inputNumber = document.getElementById('inputNumber') as HTMLInputElement;\n    const inputBase = document.getElementById('inputBase') as HTMLInputElement;\n    const outputBase = document.getElementById('outputBase') as HTMLInputElement;\n\n    if (convertBtn) convertBtn.addEventListener('click', () => this.performConversion());\n    if (clearBtn) clearBtn.addEventListener('click', () => this.clearConversion());\n    if (inputNumber) {\n      inputNumber.addEventListener('input', () => this.performConversion());\n      inputNumber.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') this.performConversion();\n      });\n    }\n    if (inputBase) {\n      inputBase.addEventListener('input', () => {\n        if (this.isConverterTabActive()) {\n          this.updateBaseHint('fromBase');\n          this.performConversion();\n        }\n      });\n      inputBase.addEventListener('change', () => {\n        if (this.isConverterTabActive()) {\n          this.updateBaseHint('fromBase');\n          this.performConversion();\n        }\n      });\n    }\n    if (outputBase) {\n      outputBase.addEventListener('input', () => {\n        if (this.isConverterTabActive()) {\n          this.updateBaseHint('toBase');\n          this.performConversion();\n        }\n      });\n      outputBase.addEventListener('change', () => {\n        if (this.isConverterTabActive()) {\n          this.updateBaseHint('toBase');\n          this.performConversion();\n        }\n      });\n    }\n\n    // Quick preset buttons\n    const presetButtons = document.querySelectorAll('.preset-quick-btn');\n    presetButtons.forEach(button => {\n      button.addEventListener('click', (e) => {\n        const from = (e.target as HTMLElement).getAttribute('data-from') || '10';\n        const to = (e.target as HTMLElement).getAttribute('data-to') || '16';\n        const value = (e.target as HTMLElement).getAttribute('data-value') || '';\n        this.applyPreset(from, to, value);\n      });\n    });\n  }\n\n  private switchTab(tabName: string) {\n    // Update tab buttons\n    const tabButtons = document.querySelectorAll('.tab-btn');\n    tabButtons.forEach(btn => {\n      if (btn.getAttribute('data-tab') === tabName) {\n        btn.classList.add('active');\n      } else {\n        btn.classList.remove('active');\n      }\n    });\n\n    // Update tab content\n    const tabContents = document.querySelectorAll('.tab-content');\n    tabContents.forEach(content => {\n      const contentId = content.id;\n      if (contentId === `${tabName}-tab`) {\n        content.classList.remove('hidden');\n      } else {\n        content.classList.add('hidden');\n      }\n    });\n\n    // Update base hints when switching to converter tab\n    if (tabName === 'converter') {\n      setTimeout(() => {\n        this.updateBaseHint('fromBase');\n        this.updateBaseHint('toBase');\n      }, 50);\n    }\n  }\n\n  private isConverterTabActive(): boolean {\n    const converterTab = document.getElementById('converter-tab');\n    return !!(converterTab && !converterTab.classList.contains('hidden'));\n  }\n\n  private async ensureWasmInitialized() {\n    if (!this.wasmInitialized) {\n      await init();\n      this.wasmInitialized = true;\n    }\n  }\n\n  private async runAllBenchmarks() {\n    const loading = document.getElementById('loading');\n    const resultsTable = document.getElementById('resultsTable');\n    const error = document.getElementById('error');\n    const runButton = document.getElementById('runAllBenchmarks') as HTMLButtonElement;\n    const loadingText = document.getElementById('loadingText');\n\n    // Hide previous results and errors\n    if (resultsTable) resultsTable.classList.add('hidden');\n    if (error) error.classList.add('hidden');\n    if (loading) loading.classList.remove('hidden');\n    if (runButton) runButton.disabled = true;\n\n    try {\n      // Initialize WASM\n      await this.ensureWasmInitialized();\n\n      const results: Array<TestCase & BenchmarkResult> = [];\n\n      // Run all benchmarks sequentially\n      for (let i = 0; i < this.benchmarkTests.length; i++) {\n        const testCase = this.benchmarkTests[i];\n\n        // Update loading text\n        if (loadingText) {\n          loadingText.textContent = `Running ${testCase.name}... (${i + 1}/${this.benchmarkTests.length})`;\n        }\n\n        try {\n          const result = await run_quick_benchmark(\n            testCase.type,\n            testCase.iterations,\n            new Uint32Array(testCase.inputDigits),\n            testCase.fromBase,\n            testCase.toBase\n          );\n\n          results.push({\n            ...testCase,\n            ...result\n          });\n        } catch (err) {\n          console.error(`Error in ${testCase.name}:`, err);\n          results.push({\n            ...testCase,\n            baseline_time: 0,\n            optimized_time: 0,\n            speedup: 0,\n            baseline_result: [],\n            optimized_result: [],\n            is_correct: false\n          });\n        }\n\n        // Small delay for UI update\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      // Display results\n      this.displayResultsTable(results);\n      this.displaySummary(results);\n\n    } catch (err) {\n      console.error('Benchmark error:', err);\n      if (error) {\n        error.textContent = `Error: ${err}`;\n        error.classList.remove('hidden');\n      }\n    } finally {\n      if (loading) loading.classList.add('hidden');\n      if (runButton) runButton.disabled = false;\n    }\n  }\n\n  private displayResultsTable(results: Array<TestCase & BenchmarkResult>) {\n    const tableBody = document.getElementById('tableBody');\n    const resultsTable = document.getElementById('resultsTable');\n\n    if (!tableBody || !resultsTable) return;\n\n    resultsTable.classList.remove('hidden');\n\n    tableBody.innerHTML = results.map(result => `\n      <tr>\n        <td class=\"test-name\">${result.name}</td>\n        <td>\n          <span class=\"test-type type-${result.type}\">${result.type}</span>\n        </td>\n        <td>${result.baseline_time.toFixed(2)}</td>\n        <td>${result.optimized_time.toFixed(2)}</td>\n        <td>\n          <span class=\"speedup-value ${result.speedup > 1 ? 'speedup-positive' : 'speedup-negative'}\">\n            ${result.speedup.toFixed(2)}×\n          </span>\n        </td>\n        <td class=\"${result.is_correct ? 'status-correct' : 'status-incorrect'}\">\n          ${result.is_correct ? '✓ Correct' : '✗ Incorrect'}\n        </td>\n      </tr>\n    `).join('');\n  }\n\n  private displaySummary(results: Array<TestCase & BenchmarkResult>) {\n    const summaryStats = document.getElementById('summaryStats');\n    if (!summaryStats) return;\n\n    const avgSpeedup = results.reduce((sum, r) => sum + r.speedup, 0) / results.length;\n    const maxSpeedup = Math.max(...results.map(r => r.speedup));\n    const correctTests = results.filter(r => r.is_correct).length;\n    const totalBaselineTime = results.reduce((sum, r) => sum + r.baseline_time, 0);\n    const totalOptimizedTime = results.reduce((sum, r) => sum + r.optimized_time, 0);\n\n    summaryStats.innerHTML = `\n      <div class=\"summary-card\">\n        <div class=\"summary-value\">${avgSpeedup.toFixed(2)}×</div>\n        <div class=\"summary-label\">Avg Speedup</div>\n      </div>\n      <div class=\"summary-card\">\n        <div class=\"summary-value\">${maxSpeedup.toFixed(2)}×</div>\n        <div class=\"summary-label\">Best Speedup</div>\n      </div>\n      <div class=\"summary-card\">\n        <div class=\"summary-value\">${correctTests}/${results.length}</div>\n        <div class=\"summary-label\">Tests Passed</div>\n      </div>\n      <div class=\"summary-card\">\n        <div class=\"summary-value\">${((totalOptimizedTime / totalBaselineTime) * 100).toFixed(1)}%</div>\n        <div class=\"summary-label\">Time Saved</div>\n      </div>\n    `;\n  }\n\n  private async performConversion() {\n    const inputNumber = document.getElementById('inputNumber') as HTMLInputElement;\n    const inputBase = document.getElementById('inputBase') as HTMLInputElement;\n    const outputBase = document.getElementById('outputBase') as HTMLInputElement;\n    const resultDisplay = document.getElementById('conversionResult');\n    const conversionTimeDisplay = document.getElementById('conversionTimeDisplay');\n    const error = document.getElementById('converterError');\n    const algorithmInfo = document.getElementById('algorithmInfo');\n    const strategyType = document.getElementById('strategyType');\n    const conversionTime = document.getElementById('conversionTime');\n    const digitsProcessed = document.getElementById('digitsProcessed');\n\n    if (!inputNumber || !inputBase || !outputBase || !resultDisplay) return;\n\n    const inputValue = inputNumber.value.trim();\n    const fromBase = parseInt(inputBase.value);\n    const toBase = parseInt(outputBase.value);\n\n    // Clear previous errors\n    if (error) error.classList.add('hidden');\n\n    // Validation\n    if (!inputValue) {\n      resultDisplay.textContent = '-';\n      if (conversionTimeDisplay) conversionTimeDisplay.textContent = '-';\n      if (algorithmInfo) algorithmInfo.classList.add('hidden');\n      return;\n    }\n\n    if (fromBase < 2 || fromBase > 65536 || toBase < 2 || toBase > 65536) {\n      this.showConverterError('Base must be between 2 and 65536');\n      return;\n    }\n\n    try {\n      await this.ensureWasmInitialized();\n\n      const startTime = performance.now();\n\n      // Parse input to digits\n      const inputDigits = this.stringToDigits(inputValue, fromBase);\n\n      // Perform conversion\n      const result = this.performBaseConversion(inputDigits, fromBase, toBase);\n      const endTime = performance.now();\n\n      // Format result\n      const resultString = this.digitsToString(result);\n      resultDisplay.textContent = resultString;\n\n      // Show conversion time\n      if (conversionTimeDisplay) {\n        const timeElapsed = (endTime - startTime).toFixed(3);\n        conversionTimeDisplay.textContent = `⏱️ ${timeElapsed} ms`;\n        conversionTimeDisplay.style.color = timeElapsed === '0.000' ? '#9ca3af' : '#4f46e5';\n      }\n\n      // Show algorithm info\n      if (algorithmInfo && strategyType && conversionTime && digitsProcessed) {\n        algorithmInfo.classList.remove('hidden');\n\n        // Determine strategy\n        let strategy = 'General Division';\n        if (this.isPowerOfTwo(fromBase) && this.isPowerOfTwo(toBase)) {\n          strategy = 'Bit Operations';\n        } else if (inputDigits.length <= 5 && fromBase === 10) {\n          strategy = 'u128 Fast Path';\n        } else if (this.areAlignedBases(fromBase, toBase)) {\n          strategy = 'Aligned Bases';\n        }\n\n        strategyType.textContent = strategy;\n        conversionTime.textContent = `${(endTime - startTime).toFixed(3)} ms`;\n        digitsProcessed.textContent = inputDigits.length.toString();\n      }\n\n    } catch (err) {\n      this.showConverterError(`Conversion error: ${err}`);\n      resultDisplay.textContent = 'Error';\n      if (conversionTimeDisplay) conversionTimeDisplay.textContent = '-';\n    }\n  }\n\n  private clearConversion() {\n    const inputNumber = document.getElementById('inputNumber') as HTMLInputElement;\n    const resultDisplay = document.getElementById('conversionResult');\n    const conversionTimeDisplay = document.getElementById('conversionTimeDisplay');\n    const error = document.getElementById('converterError');\n    const algorithmInfo = document.getElementById('algorithmInfo');\n\n    if (inputNumber) inputNumber.value = '';\n    if (resultDisplay) resultDisplay.textContent = '-';\n    if (conversionTimeDisplay) conversionTimeDisplay.textContent = '-';\n    if (error) error.classList.add('hidden');\n    if (algorithmInfo) algorithmInfo.classList.add('hidden');\n  }\n\n  private applyPreset(fromBase: string, toBase: string, value: string) {\n    const inputNumber = document.getElementById('inputNumber') as HTMLInputElement;\n    const inputBase = document.getElementById('inputBase') as HTMLInputElement;\n    const outputBase = document.getElementById('outputBase') as HTMLInputElement;\n\n    if (inputNumber) inputNumber.value = value;\n    if (inputBase) inputBase.value = fromBase;\n    if (outputBase) outputBase.value = toBase;\n\n    // Update base hints\n    this.updateBaseHint('fromBase');\n    this.updateBaseHint('toBase');\n\n    // Auto convert\n    this.performConversion();\n  }\n\n  private showConverterError(message: string) {\n    const error = document.getElementById('converterError');\n    if (error) {\n      error.textContent = message;\n      error.classList.remove('hidden');\n    }\n  }\n\n  private updateBaseHint(baseType: 'fromBase' | 'toBase') {\n    const input = document.getElementById(baseType) as HTMLInputElement;\n    const hint = document.getElementById(baseType === 'fromBase' ? 'fromBaseHint' : 'toBaseHint');\n\n    if (!input || !hint) {\n      // Elements might not exist if not on converter tab\n      return;\n    }\n\n    const base = parseInt(input.value) || 10;\n    let hintText = '';\n\n    if (base <= 10) {\n      hintText = `Base ${base}: Use digits 0-${base - 1}`;\n    } else if (base <= 36) {\n      const maxDigit = this.getDigitRepresentation(base - 1);\n      const examples = this.getBaseExamples(base, 'lower');\n      hintText = `Base ${base}: Use 0-9, A-${maxDigit.toUpperCase()} ${examples}`;\n    } else if (base <= 62) {\n      const maxDigit = this.getDigitRepresentation(base - 1);\n      const examples = this.getBaseExamples(base, 'mixed');\n      hintText = `Base ${base}: Use 0-9, a-z, A-Z (35=${maxDigit}) ${examples}`;\n    } else {\n      const examples = this.getBaseExamples(base, 'mixed');\n      hintText = `Base ${base}: Use digits [0-${base-1}] ${examples}`;\n    }\n\n    hint.textContent = hintText;\n  }\n\n  private getDigitRepresentation(value: number): string {\n    if (value < 10) return value.toString();\n    if (value < 36) return String.fromCharCode(65 + value - 10); // A-Z\n    return String.fromCharCode(97 + value - 36); // a-z\n  }\n\n  private getBaseExamples(base: number, _caseType: 'lower' | 'upper' | 'mixed'): string {\n    const examples = [];\n\n    // Common examples for different bases\n    switch (base) {\n      case 16:\n        examples.push('(e.g., FF, 1A2B)');\n        break;\n      case 32:\n        examples.push('(e.g., 1V, Z0)');\n        break;\n      case 36:\n        examples.push('(e.g., Z, 1K2)');\n        break;\n      case 62:\n        examples.push('(e.g., z, 1a, A0)');\n        break;\n      default:\n        if (base <= 36) {\n          const maxVal = Math.min(base - 1, 35);\n          const digit1 = this.getDigitRepresentation(10);\n          const digit2 = this.getDigitRepresentation(maxVal);\n          examples.push(`(e.g., ${digit1}${digit2})`);\n        } else {\n          examples.push('(e.g., [10][35])');\n        }\n    }\n\n    return examples.join(' ');\n  }\n\n  private stringToDigits(str: string, base: number): number[] {\n    const digits: number[] = [];\n    let num: bigint;\n\n    try {\n      // Handle different number formats\n      if (str.startsWith('0x') || str.startsWith('0X')) {\n        // Hexadecimal\n        num = BigInt(str);\n      } else if (str.startsWith('0b') || str.startsWith('0B')) {\n        // Binary\n        num = BigInt(str);\n      } else if (str.startsWith('0o') || str.startsWith('0O')) {\n        // Octal\n        num = BigInt(str);\n      } else {\n        // Convert based on the specified base\n        num = this.parseNumberInBase(str, base);\n      }\n    } catch (err) {\n      throw new Error(`Invalid number \"${str}\" for base ${base}`);\n    }\n\n    if (num === 0n) {\n      return [0];\n    }\n\n    while (num > 0n) {\n      digits.push(Number(num % BigInt(base)));\n      num = num / BigInt(base);\n    }\n\n    return digits;\n  }\n\n  private parseNumberInBase(str: string, base: number): bigint {\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = 0n;\n\n    for (let i = 0; i < str.length; i++) {\n      const char = str[i].toLowerCase();\n      const value = chars.indexOf(char);\n\n      if (value === -1 || value >= base) {\n        throw new Error(`Invalid digit \"${char}\" for base ${base}`);\n      }\n\n      result = result * BigInt(base) + BigInt(value);\n    }\n\n    return result;\n  }\n\n  private performBaseConversion(digits: number[], fromBase: number, toBase: number): Uint32Array {\n    if (fromBase === toBase) {\n      return new Uint32Array(digits);\n    }\n\n    // Convert digits to bigint value\n    let value = 0n;\n    for (let i = digits.length - 1; i >= 0; i--) {\n      value = value * BigInt(fromBase) + BigInt(digits[i]);\n    }\n\n    // Convert bigint to target base digits\n    if (value === 0n) {\n      return new Uint32Array([0]);\n    }\n\n    const result: number[] = [];\n    while (value > 0n) {\n      result.push(Number(value % BigInt(toBase)));\n      value = value / BigInt(toBase);\n    }\n\n    return new Uint32Array(result);\n  }\n\n  private digitsToString(digits: Uint32Array): string {\n    if (digits.length === 0) return '0';\n    if (digits.length === 1 && digits[0] === 0) return '0';\n\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = '';\n\n    for (let i = digits.length - 1; i >= 0; i--) {\n      const digit = digits[i];\n      if (digit < 10) {\n        result += digit.toString();\n      } else if (digit < 36) {\n        result += chars[digit];\n      } else {\n        result += `[${digit}]`;\n      }\n    }\n\n    return result;\n  }\n\n  private isPowerOfTwo(n: number): boolean {\n    return n > 0 && (n & (n - 1)) === 0;\n  }\n\n  private areAlignedBases(base1: number, base2: number): boolean {\n    const commonAlignments = [\n      [4, 16], [8, 64], [16, 256], [3, 27], [9, 81],\n      [16, 4], [64, 8], [256, 16], [27, 3], [81, 9]\n    ];\n\n    return commonAlignments.some(([a, b]) =>\n      (a === base1 && b === base2) || (a === base2 && b === base1)\n    );\n  }\n}\n\n// Initialize app when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  new BenchmarkApp();\n});"],"names":["wasm","cachedUint8ArrayMemory0","getUint8ArrayMemory0","cachedTextDecoder","MAX_SAFARI_DECODE_BYTES","numBytesDecoded","decodeText","ptr","len","getStringFromWasm0","addToExternrefTable0","obj","idx","handleError","f","args","e","isLikeNone","x","WASM_VECTOR_LEN","cachedTextEncoder","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","ret","cachedDataViewMemory0","getDataViewMemory0","debugString","val","type","description","name","length","debug","i","builtInMatches","className","cachedUint32ArrayMemory0","getUint32ArrayMemory0","passArray32ToWasm0","run_quick_benchmark","test_type","iterations","input_digits","from_base","to_base","ptr0","len0","ptr1","len1","EXPECTED_RESPONSE_TYPES","__wbg_load","module","imports","bytes","instance","__wbg_get_imports","arg0","arg1","deferred0_0","deferred0_1","result","arg2","table","__wbg_finalize_init","__wbg_init","module_or_path","BenchmarkApp","__publicField","_","button","targetTab","runAllButton","convertBtn","clearBtn","inputNumber","inputBase","outputBase","from","to","value","tabName","btn","content","converterTab","init","loading","resultsTable","error","runButton","loadingText","results","testCase","err","resolve","tableBody","summaryStats","avgSpeedup","sum","r","maxSpeedup","correctTests","totalBaselineTime","totalOptimizedTime","resultDisplay","conversionTimeDisplay","algorithmInfo","strategyType","conversionTime","digitsProcessed","inputValue","fromBase","toBase","startTime","inputDigits","endTime","resultString","timeElapsed","strategy","message","baseType","input","hint","base","hintText","maxDigit","examples","_caseType","maxVal","digit1","digit2","str","digits","num","chars","char","digit","n","base1","base2","a","b"],"mappings":"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"}